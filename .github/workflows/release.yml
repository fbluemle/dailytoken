name: release
on:
  push:
    tags:
      - 'v*.*.*'
jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - run: yarn --frozen-lockfile
      - run: echo "${{ secrets.ANDROID_KEYSTORE_B64 }}" | base64 -d > android/app/dailytoken-upload.keystore
      - run: ./gradlew assembleRelease -PstoreFile=dailytoken-upload.keystore -PstorePassword=${{ secrets.ANDROID_STORE_PW }} -PkeyAlias=upload -PkeyPassword=${{ secrets.ANDROID_KEY_PW }}
        working-directory: android
      - run: ./gradlew bundleRelease -PstoreFile=dailytoken-upload.keystore -PstorePassword=${{ secrets.ANDROID_STORE_PW }} -PkeyAlias=upload -PkeyPassword=${{ secrets.ANDROID_KEY_PW }}
        working-directory: android
      - uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab
  ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: yarn --frozen-lockfile
      - run: pod install
        working-directory: ios
      - run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate
          CERT_PATH=$RUNNER_TEMP/certificate.p12
          echo "$IOS_CERTIFICATE_B64" | base64 -d > "$CERT_PATH"
          security import "$CERT_PATH" -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # Install provisioning profile
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo "$IOS_PROVISIONING_PROFILE_B64" | base64 -d > "$PROFILE_PATH"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          IOS_CERTIFICATE_B64: ${{ secrets.IOS_CERT_B64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERT_PW }}
          IOS_PROVISIONING_PROFILE_B64: ${{ secrets.IOS_PROFILE_B64 }}
      - run: |
          xcodebuild -workspace ios/dailytoken.xcworkspace \
            -scheme dailytoken \
            -configuration Release \
            -archivePath ios/build/dailytoken.xcarchive \
            DEVELOPMENT_TEAM=${{ secrets.IOS_DEV_TEAM }} \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="${{ secrets.IOS_CODE_SIGN_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="org.fbluemle.dailytoken-appstore" \
            archive
      - run: |
          cat > ios/ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store-connect</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${{ secrets.IOS_DEV_TEAM }}</string>
            <key>provisioningProfiles</key><dict>
              <key>org.fbluemle.dailytoken</key><string>org.fbluemle.dailytoken-appstore</string>
            </dict>
          </dict>
          </plist>
          EOF
      - run: |
          xcodebuild -exportArchive \
            -archivePath ios/build/dailytoken.xcarchive \
            -exportPath ios/build/exported \
            -exportOptionsPlist ios/ExportOptions.plist
      - run: |
          # Clean up keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: ios/build/exported/*.ipa
  release:
    runs-on: ubuntu-latest
    needs: [android, ios]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: android-artifacts
      - uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: ios-artifacts
      - run: |
          version_name="${GITHUB_REF_NAME#v}"
          gh release create "$GITHUB_REF_NAME" --title "$version_name" --draft \
            android-artifacts/*.apk \
            android-artifacts/*.aab \
            ios-artifacts/*.ipa
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
